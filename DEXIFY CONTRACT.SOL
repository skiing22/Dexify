// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Dexify is Ownable {
    struct Pool {
        uint256 token1Balance;
        uint256 token2Balance;
        uint256 liquidity;
    }

    uint256 public swapFee = 30; // 0.3% fee (in basis points, 1% = 100)
    mapping(address => mapping(address => Pool)) public pools;

    event LiquidityAdded(address indexed provider, address token1, address token2, uint256 amount1, uint256 amount2);
    event LiquidityRemoved(address indexed provider, address token1, address token2, uint256 amount1, uint256 amount2);
    event Swap(address indexed swapper, address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOut);

    // Add liquidity to a token pair pool
    function addLiquidity(
        address token1,
        address token2,
        uint256 amount1,
        uint256 amount2
    ) external {
        require(amount1 > 0 && amount2 > 0, "Invalid liquidity amounts");
        IERC20(token1).transferFrom(msg.sender, address(this), amount1);
        IERC20(token2).transferFrom(msg.sender, address(this), amount2);

        Pool storage pool = pools[token1][token2];
        pool.token1Balance += amount1;
        pool.token2Balance += amount2;
        pool.liquidity += (amount1 + amount2) / 2;

        emit LiquidityAdded(msg.sender, token1, token2, amount1, amount2);
    }

    // Remove liquidity from a token pair pool
    function removeLiquidity(
        address token1,
        address token2,
        uint256 liquidity
    ) external {
        Pool storage pool = pools[token1][token2];
        require(pool.liquidity >= liquidity, "Insufficient liquidity");

        uint256 amount1 = (pool.token1Balance * liquidity) / pool.liquidity;
        uint256 amount2 = (pool.token2Balance * liquidity) / pool.liquidity;

        pool.token1Balance -= amount1;
        pool.token2Balance -= amount2;
        pool.liquidity -= liquidity;

        IERC20(token1).transfer(msg.sender, amount1);
        IERC20(token2).transfer(msg.sender, amount2);

        emit LiquidityRemoved(msg.sender, token1, token2, amount1, amount2);
    }

    // Swap tokens
    function swap(
        address tokenIn,
        address tokenOut,
        uint256 amountIn
    ) external returns (uint256 amountOut) {
        Pool storage pool = pools[tokenIn][tokenOut];
        require(pool.token1Balance > 0 && pool.token2Balance > 0, "Pool doesn't exist");

        // Apply constant product formula: x * y = k
        uint256 tokenInBalance = pool.token1Balance;
        uint256 tokenOutBalance = pool.token2Balance;
        uint256 k = tokenInBalance * tokenOutBalance;

        uint256 amountInWithFee = (amountIn * (10000 - swapFee)) / 10000;
        uint256 newTokenInBalance = tokenInBalance + amountInWithFee;
        uint256 newTokenOutBalance = k / newTokenInBalance;

        amountOut = tokenOutBalance - newTokenOutBalance;
        require(amountOut > 0, "Insufficient output amount");

        // Update balances
        pool.token1Balance = newTokenInBalance;
        pool.token2Balance = newTokenOutBalance;

        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);
        IERC20(tokenOut).transfer(msg.sender, amountOut);

        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amountOut);
    }

    // Adjust swap fee (only owner)
    function setSwapFee(uint256 _swapFee) external onlyOwner {
        require(_swapFee <= 100, "Fee too high"); // Max 1%
        swapFee = _swapFee;
    }
}
